#+STARTUP: showall hidestars
#+TAGS: DOCS(d) CODING(c) TESTING(t) PLANING(p)
#+LINK_UP: sitemap.html
#+LINK_HOME: main.html
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+DESCRIPTION: Augment design process with system property discovering aid.
#+KEYWORDS: SmallCell, 
#+LANGUAGE: en

#+STYLE: <link rel="stylesheet" type="text/css" href="org-manual.css" />


#+AUTHOR:    Mirela Nicola
#+EMAIL:     mirela_nikola@yahoo.com
#+DATE:      2013-03-07 Thu

#+TITLE: CWMP Client Application


* Overview
  
  This chapter describes the management of customer premises equipment
  (CPE) by using the CPE WAN Management Protocol for Small Cells auto
  configuration server (SC-ACS).

  [[file:images/Remote_CPE_Control_via_TR-069.jpg]]

* Glossary

  | autoconfiguration server (ACS)     | A server that provisions a device or a collection of devices. In SC-ACS, the ACS refers to the SC-ACS server and in some instances, the DPE.                                                                  |
  | customer premises equipment (CPE)  | Terminating equipment, such as telephones, computers, and modems, supplied and installed at a customer location.                                                                                        |
  | Small Cells ACS (SC-ACS)           | An integrated solution for managing and provisioning broadband home networks. SC-ACS is a scalable product capable of supporting millions of devices.                                                   |
  | device provisioning engine (DPE)   | DPE servers cache device instructions and perform CWMP services. These distributed serves automatically synchronize with the LMS to obtain the latest instructions and provide SC-ACS scalability.      |
  | fully qualified domain name (FQDN) | FQDN is the full name of a system, rather than just its hostname. For example, cisco is a hostname and www.cisco.com is an FQDN.                                                                        |
  | HTTPS                              | See Secure Sockets Layer and Transport Layer Security.                                                                                                                                                  |
  | provisioning API                   | A series of SC-ACS functions that programs can use to make the operating system perform various functions.                                                                                                 |
  | provisioning groups                | Groupings of devices with a defined set of associated DPE servers, based on either network topology or geography.                                                                                       |
  | publishing                         | Publishing provides provisioning information to an external datastore in real time. Publishing plug-ins must be developed to write data to a datastore.                                                 |
  | redundancy                         | In internetworking, the duplication of devices, services, or connections so that, in the event of a failure, the redundant devices, services, or connections can perform the work of those that failed. |
  | Lighradio management system (LMS)  | The LMS is the primary server in the SC-ACS provisioning system. It manages generation of device instructions, processes all API requests, and manages the SC-ACS system                                |
  | template files                     | XML files that contain configuration or firmware rules for devices.                                                                                                                                     |
  | TR-069                             | A standard which defines the CPE WAN Management Protocol (CWMP), which enables communication between CPE and an autoconfiguration server                                                                |
  |                                    |                                                                                                                                                                                                         |

* Protocol Design 

  [[file:images/Stack.png]]


* Remote Procedure Call

  [[file:images/cpeCwmpcSequence.png]]

* CPE Transaction Session

  Either of following events triggers an CPE session client creation:
  - initial installation of the CPE
  - power-on or reset
  - once every ManagementServer.PeriodicInformInterval
  - asynchronous stimulus from ACS (CPE receives a valid ConnectionRequest from ACS)
  - change of ACS' URL ???
  - parameter change that requires Inform initiation
  - parameter, that the ACS has marked "active notification", has changed value due to external cause (different from ACS)
    NB. if the parameter is modified more than once before CPE is able to initiate the notification session, the CPE must only perform one notification
    NB. if a parameter is modified by an external cause while a session is in progress, the change causes a new session to be established after the current session is terminated (it must not affect the current session)
  - download/upload completion (succesful or unsuccessful) ???
  - retry of an unsuccessful terminated session

  Only if all of the following conditions are met an RPC client session is closed successful (and the associated object is destroyed):
  - ACS has no further requests to send to the CPE (only if the most recent HTTP response from ACS was empty)
  - CPE has no further requests to send to the ACS and the CPE has issued an empty HTTP POST to the ACS while HoldRequests is false
  - CPE has received all outstanding response messages from ACS
  - CPE has sent all outstanding response messages to the ACS
  
  Either of the following events triggers the closing of an unsuccessful RPC client session (and the struction of the associated object)
  - no HTTP response received from ACS for a determined time period (not less than 30 s)
  - a SOAP-layer fault (fault code other than 8005) in response to Inform
  - a HTTP response from ACS, with XML malformed or invalid SOAP structure or a protocol violation
  - a HTTP response from the ACS with a fault status code (4xx, 5xx)
  NB. exception "401 Unauthorized" status code received for (number of max admitted retries - 1)    

  All transaction sessions must begin with an Inform message from the CPE contained in the initial HTTP POST. An Inform message must not occur more than once during a session. This limitation does not apply to Inform retransmission due to 
  - an HTTP "401 unauthorized" as part of the HTTP authorization process or 
  - an HTTP 3xx status code received due to an HTTP redirect.
  The session ceases when both the ACS and CPE have no more requests to sned and no responses remain due from either the ACS or the CPE. At such time the CPE must close the connection. No more than one transaction session between the CPE and its associated ACS can exist in time.
 
* HTTP Session Client State Machine

  [[file:images/HTTP_Session_Client.png]]

  A HTTP client session object is created at CPE connection initiation by the RPC session client object (when it is triggered to send an Inform request to the ACS).
  
  A HTTP client session is described by a state diagram. The HTTP client state diagram is hierarchical. 
  At the first level it has 
  - an initial state "idle"
  - a state "in_request", where the HTTP layer sends a request to ACS and receives RPC responses from ACS
  - a final state "closed"
  
  At creation the HTTP session client object is in the state "Idle". This object creation triggers also the creation of the underlying (ssh and TCP/IP) session object. 
 
  The "in_request" state has the following sub-states: "pending_response", "pending_payload", "response_received".     
   
  A state transition from state A to state B is triggered by an event. An action is done in state B.

  "idle" -> "pending_response"
  - triggered by: HTTP POST request to send
  - action: sends HTTP request POST to ACS, creates a transport session object ???

  "pending_response" -> "pending_payload"
  - triggered by: reception of HTTP response headers (from ibrowse)
  - action: message assembly
  NB. ibrowse does not return the entire network message at a time, but in sequencial parts

  "pending_payload" -> "receive_response"
  - triggered by: multiple reception of HTTP response body parts (from ibrowse)
  - action: message assembly
   NB. ibrowse does not return the entire network message at a time, but in sequencial parts

  "receive_response" -> "idle"
  - triggered by: HTTP response end (from ibrowse)
  - action: message assembly, deliver response body and status code to higher layer

  "in_request" -> "closed"
  - triggered by: timeout (determined time not less than 30s), error
  

* RPC Session Client State Machine

  [[file:images/RPC_Session_Client.png]]

  A RPC session client object is created at CPE connection initiation. 
 
  The events listed in chapter "CPE transaction session" trigger the creation of an RPC session client object.
  The events listed in chapter "CPE transaction Session" trigger the destruction of an RPC session client.
  
  A RPC client session is described by a state diagram. The CWMP state diagram is hierarchical. 
  At the first level it has 
  - an initial state "0"
  - a state "master", where cpe_cwmpc sends RPC requests to ACS and receives RPC responses from ACS
  - a state "slave" , where cpe_cwmpc receives RPC requests from ACS and sends responses to ACS
  - a final state "close"
  
  At creation the RPC session client object is in the master initial state "0". 
 
  The "master" state has the following sub-states: "idle", "request_sent", "response_received".   
  The "slave"  state has the following sub-states: "hold", "request_received", "response_sent". 
 
  During a RPC client session CPE passes the master state at least once and the slave state multiple times (as long as ACS requests it). 
  The component plays the role of master, when it sends an RPC request and receives a response. It plays the role of slave, when it receives a RPC request and sends a response. 
  The transition from master role to slave role is done at ACS' request (reception of a SOAP header HoldRequests = "1" (true)).
  "hold" state is equivalent to "idle" state.

  A state transition from state A to state B is triggered by an event. An action is done in state B.

  "idle" -> "send_request"
  - triggered by: request event from (external/internal) application
  - action: sends ACS RPC request (Inform, TransferComplete) to ACS, creates a transport session object ???

  "send_request" -> "response_received"
  - triggered by: reception of RPC response (InformResponse, TransferCompleteResponse) 
  - action: deliver the response to triggering application 
              
  "response_received" -> "idle"
  - triggered by: header HoldRequests absent or HoldRequest = 0(false) in most recent SOAP envelope contained in a HTTP response from ACS, no SOAP envelope in the HTTP response from ACS
  - action: no

  "response_received" -> "hold"
  - triggered by: header HoldRequests = 1(true) in the most recent SOAP envelope contained in a HTTP response from ACS
  - action: no

  "hold" -> "receive_request"
  - triggered by: CPE RPC request received from ACS (AddObject, DeleteObject, SetParameterValues, GetParameterValues, Reboot, Factoryreset, Download, GetRPCMethods?, GetParameterNames?)
  - action: deliver request to (internal/external) application

  "receive_request" -> "response_sent"
  - triggered by: response event from (external/internal) application
  - action: send CPE RPC response to ACS 

  "response_sent" -> "hold"
  - triggered by: ?
  - action: no

  "hold" -> "idle"
  - triggered by: HoldRequest = 0 (false), absent or SOAP envelope absent in most recent HTTP request/response from ACS
  - action: no 

* Supervision

  file:images/Supervision.png

  Supervision process is responsable of starting, stopping and monitoring its child processes. The supervisor process is responsable of keeping its guarded child processes alive.
  The supervision process keeps a list of supervised process specification.
  The supervised process specification describes the strategy applied by the supervisor to keep the associated process alive. 
  When the supervisor is started, the child processes are started in order from left to right according to the list. When the supervisor terminates, it will terminate its child processes in reverse start order (from right to left).

  A specification entry has the following attributes:
  - module name 
  - type (ex. worker)
  - hierarchical supervisor 
  - startup strategy: 
    - one_for_one:        if a child process terminates and should be restarted, only that child process is affected
    - one_for_all:        if one child process terminates and should be restarted, all other child processes are terminated and then all child processes are restarted
    - rest_for_one:       if one child process terminates and should be restarted, the remaining child processes (child processes, after the terminated child process in start order) are terminated; then the terminated child process and all child processes after it are restarted
    - simple_one_for_one: simplified "one_for_one", where all child processes are dynamically added instances of the same process (they run the same code)
  - restarts: number of minimum restarts done by the supervisor before ????
  - limint:   number of maximum restarts done by the supervisor before ????

  Below is the list of supervised process specifications (consider the order up->down equivalent to the order left->right):
 
  | module name        | type       | supervisor         | strategy  | restarts | limit |
  | CLI_Supervisor     | supervisor |   -                | r_for_1   | 5        | 10    |
  | Session_Supervisor | worker/s   | CLI_Supervisor     | s_1_for_1 | 5        | 10    |
  | S_RPC              | worker     | Session_Supervisor | ?         | 5        | 10    |
  | S_T                | worker     | Session_Supervisor | ?         | 5        | 10    |
  | RPC                | worker     | CLI_Supervisor     | ?         | 5        | 10    |
  | HTTP               | worker     | CLI_Supervisor     | ?         | 5        | 10    |
  | IBrowse            | worker     | CLI_Supervisor     | ?         | 5        | 10    |
 
 
